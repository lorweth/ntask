{"version":3,"file":"static/js/2.02c8a68f.chunk.js","mappings":"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","sources":["chat/index.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { Box, Button, Input, List, ListItem, Progress, Text } from '@chakra-ui/react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { solid } from '@fortawesome/fontawesome-svg-core/import.macro';\r\nimport * as SockJS from 'sockjs-client';\r\nimport { over } from 'stompjs';\r\nimport { fetchChatRooms, fetchMessage } from './chatSlice';\r\n\r\nconst WS_URL = process.env.REACT_APP_WS_URL;\r\n\r\nexport default function Chat() {\r\n  const dispatch = useDispatch();\r\n  const userData = useSelector((state) => state.auth.userData);\r\n  const rooms = useSelector((state) => state.chat.events);\r\n  const msgList = useSelector((state) => state.chat.msgList);\r\n  const [selectedRoom, setSelectedRoom] = useState(null);\r\n  const [sendInfo, setSendInfo] = useState({\r\n    from: null,\r\n  });\r\n  const [messages, setMessages] = useState([]);\r\n  const [stompClient, setStompClient] = useState(null);\r\n  const [currSub, setCurrSub] = useState(null);\r\n  const chatInputRef = useRef({});\r\n\r\n  // Get all events as room chats\r\n  useEffect(() => {\r\n    dispatch(fetchChatRooms({ page: 0, size: 30 }));\r\n\r\n    // Connect to websocket\r\n    const socket = new SockJS(WS_URL);\r\n    const client = over(socket);\r\n    client.connect(\r\n      {},\r\n      (frame) => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(`Connected: ${frame}`);\r\n      },\r\n      (err) => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(err);\r\n      }\r\n    );\r\n    setStompClient(client); // store stomp client\r\n  }, []);\r\n\r\n  // Update sendInfo when login userData changes\r\n  useEffect(() => {\r\n    if (userData && userData.id !== null && userData.id !== undefined) {\r\n      setSendInfo({\r\n        ...sendInfo,\r\n        from: userData.id,\r\n      });\r\n    }\r\n  }, [userData]);\r\n\r\n  // Update sendInfo when selectedRoom changes\r\n  useEffect(() => {\r\n    if (selectedRoom) {\r\n      dispatch(fetchMessage({ eventID: selectedRoom.id, page: 0, size: 30 }));\r\n      // Unsubscribe previous subscription\r\n      if (currSub) {\r\n        currSub.unsubscribe();\r\n      }\r\n\r\n      // Subscribe to room chat\r\n      const stompSub = stompClient.subscribe(`/topic/${selectedRoom.id}`, (payload) => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(payload);\r\n        setMessages((msg) => [JSON.parse(payload.body), ...msg]);\r\n      });\r\n      setCurrSub(stompSub);\r\n    }\r\n  }, [selectedRoom]);\r\n\r\n  useEffect(() => {\r\n    if (msgList) {\r\n      setMessages(msgList);\r\n    }\r\n  }, [msgList]);\r\n\r\n  const onClickRoom = (room) => {\r\n    setSelectedRoom(room);\r\n  };\r\n\r\n  const onSendMessage = (e) => {\r\n    e.preventDefault();\r\n    const { current } = chatInputRef;\r\n    const msg = current.value.trim();\r\n    if (msg === '') {\r\n      return;\r\n    }\r\n\r\n    const message = {\r\n      content: msg,\r\n      room: selectedRoom.id,\r\n      from: userData.id,\r\n    };\r\n    stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\r\n    current.value = '';\r\n  };\r\n\r\n  const loadMoreRoom = () => {\r\n    // eslint-disable-next-line no-console\r\n    console.log('load more room');\r\n  };\r\n\r\n  const loadMoreMessage = () => {\r\n    // eslint-disable-next-line no-console\r\n    console.log('load more message');\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      as=\"div\"\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        p: 2,\r\n        width: '100%',\r\n        height: '100%',\r\n        gap: '0.5rem',\r\n        boxShadow: 'md',\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          flex: 4,\r\n          flexDirection: 'column',\r\n          borderRight: '1px solid',\r\n          borderColor: 'gray.200',\r\n        }}\r\n      >\r\n        <Box as=\"div\" sx={{ display: 'flex', flexDirection: 'column' }}>\r\n          {selectedRoom ? (\r\n            <List sx={{ m: 2 }}>\r\n              <InfiniteScroll\r\n                dataLength={messages.length}\r\n                next={loadMoreMessage}\r\n                height=\"500px\"\r\n                style={{ display: 'flex', flexDirection: 'column-reverse', gap: '0.2rem', m: 2 }}\r\n                hasMore\r\n                loader={<Progress isIndeterminate />}\r\n              >\r\n                {messages.length < 0 ? (\r\n                  <ListItem key=\"no-content\">\r\n                    <Text>Let&lsquo;s start chatting</Text>\r\n                  </ListItem>\r\n                ) : (\r\n                  messages.map((item) => (\r\n                    <ListItem key={`message_${item.id}`}>\r\n                      <Box\r\n                        sx={{\r\n                          display: 'flex',\r\n                          justifyContent: item.from === userData.id ? 'end' : 'start',\r\n                        }}\r\n                      >\r\n                        <Text\r\n                          sx={{\r\n                            width: 'max-content',\r\n                            padding: '.2rem .5rem',\r\n                            color: 'blackAlpha.900',\r\n                            backgroundColor: 'gray.300',\r\n                            borderRadius: '0.3rem',\r\n                          }}\r\n                        >\r\n                          {item.content}\r\n                        </Text>\r\n                      </Box>\r\n                    </ListItem>\r\n                  ))\r\n                )}\r\n              </InfiniteScroll>\r\n            </List>\r\n          ) : (\r\n            <Box\r\n              component=\"div\"\r\n              height=\"500px\"\r\n              display=\"flex\"\r\n              flexDirection=\"column\"\r\n              justifyContent=\"end\"\r\n            >\r\n              <Text textAlign=\"center\">Please choose a room</Text>\r\n            </Box>\r\n          )}\r\n          <Box\r\n            as=\"form\"\r\n            sx={{\r\n              display: 'flex',\r\n              gap: '0.2rem',\r\n              m: 2,\r\n            }}\r\n            onSubmit={onSendMessage}\r\n          >\r\n            <Input sx={{ flex: 11 }} ref={chatInputRef} />\r\n            <Button type=\"submit\" colorScheme=\"messenger\">\r\n              <FontAwesomeIcon icon={solid('paper-plane')} />\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          flex: 1,\r\n          flexDirection: 'column',\r\n        }}\r\n      >\r\n        <InfiniteScroll\r\n          dataLength={rooms.length}\r\n          next={loadMoreRoom}\r\n          height=\"100%\"\r\n          style={{ display: 'flex', flexDirection: 'column', gap: '0.2rem' }}\r\n          hasMore\r\n          loader={<Progress isIndeterminate />}\r\n        >\r\n          {rooms.map((event) => (\r\n            <Button\r\n              key={event.id}\r\n              variant=\"solid\"\r\n              colorScheme={selectedRoom && selectedRoom.id === event.id ? 'teal' : 'gray'}\r\n              onClick={() => onClickRoom(event)}\r\n            >\r\n              <FontAwesomeIcon icon={solid('users')} />\r\n              &nbsp;{event.name}\r\n            </Button>\r\n          ))}\r\n        </InfiniteScroll>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n"],"names":["Chat","dispatch","useDispatch","userData","useSelector","state","auth","rooms","chat","events","msgList","useState","selectedRoom","setSelectedRoom","from","sendInfo","setSendInfo","messages","setMessages","stompClient","setStompClient","currSub","setCurrSub","chatInputRef","useRef","useEffect","fetchChatRooms","page","size","socket","SockJS","process","client","over","connect","frame","console","log","err","id","undefined","fetchMessage","eventID","unsubscribe","stompSub","subscribe","payload","msg","JSON","parse","body","as","sx","display","flexDirection","p","width","height","gap","boxShadow","flex","borderRight","borderColor","m","dataLength","length","next","style","hasMore","loader","isIndeterminate","map","item","justifyContent","padding","color","backgroundColor","borderRadius","content","component","textAlign","onSubmit","e","preventDefault","current","value","trim","message","room","send","stringify","ref","type","colorScheme","icon","event","variant","onClick","name"],"sourceRoot":""}