{"version":3,"file":"static/js/2.02c8a68f.chunk.js","mappings":"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","sources":["chat/index.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { Box, Button, Input, List, ListItem, Progress, Text } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { solid } from '@fortawesome/fontawesome-svg-core/import.macro';\nimport * as SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { fetchChatRooms, fetchMessage } from './chatSlice';\n\nconst WS_URL = process.env.REACT_APP_WS_URL;\n\nexport default function Chat() {\n  const dispatch = useDispatch();\n  const userData = useSelector((state) => state.auth.userData);\n  const rooms = useSelector((state) => state.chat.events);\n  const msgList = useSelector((state) => state.chat.msgList);\n  const [selectedRoom, setSelectedRoom] = useState(null);\n  const [sendInfo, setSendInfo] = useState({\n    from: null,\n  });\n  const [messages, setMessages] = useState([]);\n  const [stompClient, setStompClient] = useState(null);\n  const [currSub, setCurrSub] = useState(null);\n  const chatInputRef = useRef({});\n\n  // Get all events as room chats\n  useEffect(() => {\n    dispatch(fetchChatRooms({ page: 0, size: 30 }));\n\n    // Connect to websocket\n    const socket = new SockJS(WS_URL);\n    const client = over(socket);\n    client.connect(\n      {},\n      (frame) => {\n        // eslint-disable-next-line no-console\n        console.log(`Connected: ${frame}`);\n      },\n      (err) => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n      }\n    );\n    setStompClient(client); // store stomp client\n  }, []);\n\n  // Update sendInfo when login userData changes\n  useEffect(() => {\n    if (userData && userData.id !== null && userData.id !== undefined) {\n      setSendInfo({\n        ...sendInfo,\n        from: userData.id,\n      });\n    }\n  }, [userData]);\n\n  // Update sendInfo when selectedRoom changes\n  useEffect(() => {\n    if (selectedRoom) {\n      dispatch(fetchMessage({ eventID: selectedRoom.id, page: 0, size: 30 }));\n      // Unsubscribe previous subscription\n      if (currSub) {\n        currSub.unsubscribe();\n      }\n\n      // Subscribe to room chat\n      const stompSub = stompClient.subscribe(`/topic/${selectedRoom.id}`, (payload) => {\n        // eslint-disable-next-line no-console\n        console.log(payload);\n        setMessages((msg) => [JSON.parse(payload.body), ...msg]);\n      });\n      setCurrSub(stompSub);\n    }\n  }, [selectedRoom]);\n\n  useEffect(() => {\n    if (msgList) {\n      setMessages(msgList);\n    }\n  }, [msgList]);\n\n  const onClickRoom = (room) => {\n    setSelectedRoom(room);\n  };\n\n  const onSendMessage = (e) => {\n    e.preventDefault();\n    const { current } = chatInputRef;\n    const msg = current.value.trim();\n    if (msg === '') {\n      return;\n    }\n\n    const message = {\n      content: msg,\n      room: selectedRoom.id,\n      from: userData.id,\n    };\n    stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n    current.value = '';\n  };\n\n  const loadMoreRoom = () => {\n    // eslint-disable-next-line no-console\n    console.log('load more room');\n  };\n\n  const loadMoreMessage = () => {\n    // eslint-disable-next-line no-console\n    console.log('load more message');\n  };\n\n  return (\n    <Box\n      as=\"div\"\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        p: 2,\n        width: '100%',\n        height: '100%',\n        gap: '0.5rem',\n        boxShadow: 'md',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          flex: 4,\n          flexDirection: 'column',\n          borderRight: '1px solid',\n          borderColor: 'gray.200',\n        }}\n      >\n        <Box as=\"div\" sx={{ display: 'flex', flexDirection: 'column' }}>\n          {selectedRoom ? (\n            <List sx={{ m: 2 }}>\n              <InfiniteScroll\n                dataLength={messages.length}\n                next={loadMoreMessage}\n                height=\"500px\"\n                style={{ display: 'flex', flexDirection: 'column-reverse', gap: '0.2rem', m: 2 }}\n                hasMore\n                loader={<Progress isIndeterminate />}\n              >\n                {messages.length < 0 ? (\n                  <ListItem key=\"no-content\">\n                    <Text>Let&lsquo;s start chatting</Text>\n                  </ListItem>\n                ) : (\n                  messages.map((item) => (\n                    <ListItem key={`message_${item.id}`}>\n                      <Box\n                        sx={{\n                          display: 'flex',\n                          justifyContent: item.from === userData.id ? 'end' : 'start',\n                        }}\n                      >\n                        <Text\n                          sx={{\n                            width: 'max-content',\n                            padding: '.2rem .5rem',\n                            color: 'blackAlpha.900',\n                            backgroundColor: 'gray.300',\n                            borderRadius: '0.3rem',\n                          }}\n                        >\n                          {item.content}\n                        </Text>\n                      </Box>\n                    </ListItem>\n                  ))\n                )}\n              </InfiniteScroll>\n            </List>\n          ) : (\n            <Box\n              component=\"div\"\n              height=\"500px\"\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"end\"\n            >\n              <Text textAlign=\"center\">Please choose a room</Text>\n            </Box>\n          )}\n          <Box\n            as=\"form\"\n            sx={{\n              display: 'flex',\n              gap: '0.2rem',\n              m: 2,\n            }}\n            onSubmit={onSendMessage}\n          >\n            <Input sx={{ flex: 11 }} ref={chatInputRef} />\n            <Button type=\"submit\" colorScheme=\"messenger\">\n              <FontAwesomeIcon icon={solid('paper-plane')} />\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          flex: 1,\n          flexDirection: 'column',\n        }}\n      >\n        <InfiniteScroll\n          dataLength={rooms.length}\n          next={loadMoreRoom}\n          height=\"100%\"\n          style={{ display: 'flex', flexDirection: 'column', gap: '0.2rem' }}\n          hasMore\n          loader={<Progress isIndeterminate />}\n        >\n          {rooms.map((event) => (\n            <Button\n              key={event.id}\n              variant=\"solid\"\n              colorScheme={selectedRoom && selectedRoom.id === event.id ? 'teal' : 'gray'}\n              onClick={() => onClickRoom(event)}\n            >\n              <FontAwesomeIcon icon={solid('users')} />\n              &nbsp;{event.name}\n            </Button>\n          ))}\n        </InfiniteScroll>\n      </Box>\n    </Box>\n  );\n}\n"],"names":["Chat","dispatch","useDispatch","userData","useSelector","state","auth","rooms","chat","events","msgList","useState","selectedRoom","setSelectedRoom","from","sendInfo","setSendInfo","messages","setMessages","stompClient","setStompClient","currSub","setCurrSub","chatInputRef","useRef","useEffect","fetchChatRooms","page","size","socket","SockJS","process","client","over","connect","frame","console","log","err","id","undefined","fetchMessage","eventID","unsubscribe","stompSub","subscribe","payload","msg","JSON","parse","body","as","sx","display","flexDirection","p","width","height","gap","boxShadow","flex","borderRight","borderColor","m","dataLength","length","next","style","hasMore","loader","isIndeterminate","map","item","justifyContent","padding","color","backgroundColor","borderRadius","content","component","textAlign","onSubmit","e","preventDefault","current","value","trim","message","room","send","stringify","ref","type","colorScheme","icon","event","variant","onClick","name"],"sourceRoot":""}