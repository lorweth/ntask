{"version":3,"file":"static/js/2.0d7fe591.chunk.js","mappings":"sTAYe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,QAAQ,IACrDI,GAAQH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMG,KAAKC,MAAM,IAChDC,GAAUN,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMG,KAAKE,OAAO,IACzD,GAAwCC,EAAAA,EAAAA,UAAS,MAAK,eAA/CC,EAAY,KAAEC,EAAe,KACpC,GAAgCF,EAAAA,EAAAA,UAAS,CACvCG,KAAM,OACN,eAFKC,EAAQ,KAAEC,EAAW,KAG5B,GAAgCL,EAAAA,EAAAA,UAAS,IAAG,eAArCM,EAAQ,KAAEC,EAAW,KAC5B,GAAsCP,EAAAA,EAAAA,UAAS,MAAK,eAA7CQ,EAAW,KAAEC,EAAc,KAC5BC,GAAeC,EAAAA,EAAAA,QAAO,CAAC,IAG7BC,EAAAA,EAAAA,YAAU,WACRtB,GAASuB,EAAAA,EAAAA,IAAe,CAAEC,KAAM,EAAGC,KAAM,MAGzC,IAAMC,EAAS,IAAIC,EApBRC,gCAqBLC,GAASC,EAAAA,EAAAA,MAAKJ,GACpBG,EAAOE,QAAQ,CAAC,GAAG,SAACC,GAElBC,QAAQC,IAAI,cAAD,OAAeF,GAC5B,IACAb,EAAeU,EACjB,GAAG,KAGHP,EAAAA,EAAAA,YAAU,WACJpB,GAA4B,OAAhBA,EAASiC,SAA+BC,IAAhBlC,EAASiC,IAC/CpB,GAAY,kBACPD,GAAQ,IACXD,KAAMX,EAASiC,KAGrB,GAAG,CAACjC,KAGJoB,EAAAA,EAAAA,YAAU,WACJX,IACFX,GAASqC,EAAAA,EAAAA,IAAa,CAAEC,QAAS3B,EAAawB,GAAIX,KAAM,EAAGC,KAAM,MAEjEP,EAAYqB,UAAU,UAAD,OAAW5B,EAAawB,KAAM,SAACK,GAClDvB,GAAY,SAACwB,GAAG,OAAMC,KAAKC,MAAMH,EAAQI,OAAK,eAAKH,GAAG,GACxD,IAEJ,GAAG,CAAC9B,KAEJW,EAAAA,EAAAA,YAAU,WACJb,GACFQ,EAAYR,EAEhB,GAAG,CAACA,IAiCJ,OACE,UAAC,KAAG,CACFoC,GAAG,MACHC,GAAI,CACFC,QAAS,OACTC,cAAe,MACfC,EAAG,EACHC,MAAO,OACPC,OAAQ,OACRC,IAAK,SACLC,UAAW,MACX,WAEF,SAAC,KAAG,CACFP,GAAI,CACFC,QAAS,OACTO,KAAM,EACNN,cAAe,SACfO,YAAa,YACbC,YAAa,YACb,UAEF,UAAC,KAAG,CAACX,GAAG,MAAMC,GAAI,CAAEC,QAAS,OAAQC,cAAe,UAAW,UAC5DrC,GACC,SAAC,KAAI,CAACmC,GAAI,CAAEW,EAAG,GAAI,UACjB,SAAC,IAAc,CACbC,WAAY1C,EAAS2C,OACrBC,KAhCU,WAEtB3B,QAAQC,IAAI,oBACd,EA8BciB,OAAO,QACPU,MAAO,CAAEd,QAAS,OAAQC,cAAe,iBAAkBI,IAAK,SAAUK,EAAG,GAC7EK,SAAO,EACPC,QAAQ,SAAC,KAAQ,CAACC,iBAAe,IAAI,SAEpChD,EAAS2C,OAAS,GACjB,SAAC,KAAQ,WACP,SAAC,KAAI,yCADO,cAId3C,EAASiD,KAAI,SAACC,GAAI,OAChB,SAAC,KAAQ,WACP,SAAC,KAAG,CACFpB,GAAI,CACFC,QAAS,OACToB,eAAgBD,EAAKrD,OAASX,EAASiC,GAAK,MAAQ,SACpD,UAEF,SAAC,KAAI,CACHW,GAAI,CACFI,MAAO,cACPkB,QAAS,cACTC,MAAO,iBACPC,gBAAiB,WACjBC,aAAc,UACd,SAEDL,EAAKM,aAEJ,kBAlBkBN,EAAK/B,IAmBpB,SAMnB,SAAC,KAAG,CACFsC,UAAU,MACVtB,OAAO,QACPJ,QAAQ,OACRC,cAAc,SACdmB,eAAe,MAAK,UAEpB,SAAC,KAAI,CAACO,UAAU,SAAQ,qCAG5B,UAAC,KAAG,CACF7B,GAAG,OACHC,GAAI,CACFC,QAAS,OACTK,IAAK,SACLK,EAAG,GAELkB,SA5GY,SAACC,GACrBA,EAAEC,iBACF,IAAQC,EAAY1D,EAAZ0D,QACFrC,EAAMqC,EAAQC,MAAMC,OAC1B,GAAY,KAARvC,EAAJ,CAIA,IAAMwC,EAAU,CACdT,QAAS/B,EACTyC,KAAMvE,EAAawB,GACnBtB,KAAMX,EAASiC,IAEjBjB,EAAYiE,KAAK,wBAAyB,CAAC,EAAGzC,KAAK0C,UAAUH,IAC7DH,EAAQC,MAAQ,EARhB,CASF,EA6FkC,WAExB,SAAC,KAAK,CAACjC,GAAI,CAAEQ,KAAM,IAAM+B,IAAKjE,KAC9B,SAAC,KAAM,CAACkE,KAAK,SAASC,YAAY,YAAW,UAC3C,SAAC,IAAe,CAACC,KAAI,kBAK7B,SAAC,KAAG,CACF1C,GAAI,CACFC,QAAS,OACTO,KAAM,EACNN,cAAe,UACf,UAEF,SAAC,IAAc,CACbU,WAAYpD,EAAMqD,OAClBC,KA7Ga,WAEnB3B,QAAQC,IAAI,iBACd,EA2GQiB,OAAO,OACPU,MAAO,CAAEd,QAAS,OAAQC,cAAe,SAAUI,IAAK,UACxDU,SAAO,EACPC,QAAQ,SAAC,KAAQ,CAACC,iBAAe,IAAI,SAEpC1D,EAAM2D,KAAI,SAACwB,GAAK,OACf,UAAC,KAAM,CAELC,QAAQ,QACRH,YAAa5E,GAAgBA,EAAawB,KAAOsD,EAAMtD,GAAK,OAAS,OACrEwD,QAAS,WA5InB3F,EAASY,EA4I4B6E,GAAM,EAAC,WAElC,SAAC,IAAe,CAACD,KAAI,OAAoB,OAClCC,EAAMG,OANRH,EAAMtD,GAOJ,UAMrB,C","sources":["chat/index.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { Box, Button, Input, List, ListItem, Progress, Text } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { solid } from '@fortawesome/fontawesome-svg-core/import.macro';\nimport * as SockJS from 'sockjs-client';\nimport { over } from 'stompjs';\nimport { fetchChatRooms, fetchMessage } from './chatSlice';\n\nconst WS_URL = process.env.REACT_APP_WS_URL;\n\nexport default function Chat() {\n  const dispatch = useDispatch();\n  const userData = useSelector((state) => state.auth.userData);\n  const rooms = useSelector((state) => state.chat.events);\n  const msgList = useSelector((state) => state.chat.msgList);\n  const [selectedRoom, setSelectedRoom] = useState(null);\n  const [sendInfo, setSendInfo] = useState({\n    from: null,\n  });\n  const [messages, setMessages] = useState([]);\n  const [stompClient, setStompClient] = useState(null);\n  const chatInputRef = useRef({});\n\n  // Get all events as room chats\n  useEffect(() => {\n    dispatch(fetchChatRooms({ page: 0, size: 30 }));\n\n    // Connect to websocket\n    const socket = new SockJS(WS_URL);\n    const client = over(socket);\n    client.connect({}, (frame) => {\n      // eslint-disable-next-line no-console\n      console.log(`Connected: ${frame}`);\n    });\n    setStompClient(client); // store stomp client\n  }, []);\n\n  // Update sendInfo when login userData changes\n  useEffect(() => {\n    if (userData && userData.id !== null && userData.id !== undefined) {\n      setSendInfo({\n        ...sendInfo,\n        from: userData.id,\n      });\n    }\n  }, [userData]);\n\n  // Update sendInfo when selectedRoom changes\n  useEffect(() => {\n    if (selectedRoom) {\n      dispatch(fetchMessage({ eventID: selectedRoom.id, page: 0, size: 30 }));\n      // Subscribe to room chat\n      stompClient.subscribe(`/topic/${selectedRoom.id}`, (payload) => {\n        setMessages((msg) => [JSON.parse(payload.body), ...msg]);\n      });\n    }\n  }, [selectedRoom]);\n\n  useEffect(() => {\n    if (msgList) {\n      setMessages(msgList);\n    }\n  }, [msgList]);\n\n  const onClickRoom = (room) => {\n    dispatch(setSelectedRoom(room));\n  };\n\n  const onSendMessage = (e) => {\n    e.preventDefault();\n    const { current } = chatInputRef;\n    const msg = current.value.trim();\n    if (msg === '') {\n      return;\n    }\n\n    const message = {\n      content: msg,\n      room: selectedRoom.id,\n      from: userData.id,\n    };\n    stompClient.send('/app/chat.sendMessage', {}, JSON.stringify(message));\n    current.value = '';\n  };\n\n  const loadMoreRoom = () => {\n    // eslint-disable-next-line no-console\n    console.log('load more room');\n  };\n\n  const loadMoreMessage = () => {\n    // eslint-disable-next-line no-console\n    console.log('load more message');\n  };\n\n  return (\n    <Box\n      as=\"div\"\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        p: 2,\n        width: '100%',\n        height: '100%',\n        gap: '0.5rem',\n        boxShadow: 'md',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          flex: 4,\n          flexDirection: 'column',\n          borderRight: '1px solid',\n          borderColor: 'gray.200',\n        }}\n      >\n        <Box as=\"div\" sx={{ display: 'flex', flexDirection: 'column' }}>\n          {selectedRoom ? (\n            <List sx={{ m: 2 }}>\n              <InfiniteScroll\n                dataLength={messages.length}\n                next={loadMoreMessage}\n                height=\"500px\"\n                style={{ display: 'flex', flexDirection: 'column-reverse', gap: '0.2rem', m: 2 }}\n                hasMore\n                loader={<Progress isIndeterminate />}\n              >\n                {messages.length < 0 ? (\n                  <ListItem key=\"no-content\">\n                    <Text>Let&lsquo;s start chatting</Text>\n                  </ListItem>\n                ) : (\n                  messages.map((item) => (\n                    <ListItem key={`message_${item.id}`}>\n                      <Box\n                        sx={{\n                          display: 'flex',\n                          justifyContent: item.from === userData.id ? 'end' : 'start',\n                        }}\n                      >\n                        <Text\n                          sx={{\n                            width: 'max-content',\n                            padding: '.2rem .5rem',\n                            color: 'blackAlpha.900',\n                            backgroundColor: 'gray.300',\n                            borderRadius: '0.3rem',\n                          }}\n                        >\n                          {item.content}\n                        </Text>\n                      </Box>\n                    </ListItem>\n                  ))\n                )}\n              </InfiniteScroll>\n            </List>\n          ) : (\n            <Box\n              component=\"div\"\n              height=\"500px\"\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"end\"\n            >\n              <Text textAlign=\"center\">Please choose a room</Text>\n            </Box>\n          )}\n          <Box\n            as=\"form\"\n            sx={{\n              display: 'flex',\n              gap: '0.2rem',\n              m: 2,\n            }}\n            onSubmit={onSendMessage}\n          >\n            <Input sx={{ flex: 11 }} ref={chatInputRef} />\n            <Button type=\"submit\" colorScheme=\"messenger\">\n              <FontAwesomeIcon icon={solid('paper-plane')} />\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          flex: 1,\n          flexDirection: 'column',\n        }}\n      >\n        <InfiniteScroll\n          dataLength={rooms.length}\n          next={loadMoreRoom}\n          height=\"100%\"\n          style={{ display: 'flex', flexDirection: 'column', gap: '0.2rem' }}\n          hasMore\n          loader={<Progress isIndeterminate />}\n        >\n          {rooms.map((event) => (\n            <Button\n              key={event.id}\n              variant=\"solid\"\n              colorScheme={selectedRoom && selectedRoom.id === event.id ? 'teal' : 'gray'}\n              onClick={() => onClickRoom(event)}\n            >\n              <FontAwesomeIcon icon={solid('users')} />\n              &nbsp;{event.name}\n            </Button>\n          ))}\n        </InfiniteScroll>\n      </Box>\n    </Box>\n  );\n}\n"],"names":["Chat","dispatch","useDispatch","userData","useSelector","state","auth","rooms","chat","events","msgList","useState","selectedRoom","setSelectedRoom","from","sendInfo","setSendInfo","messages","setMessages","stompClient","setStompClient","chatInputRef","useRef","useEffect","fetchChatRooms","page","size","socket","SockJS","process","client","over","connect","frame","console","log","id","undefined","fetchMessage","eventID","subscribe","payload","msg","JSON","parse","body","as","sx","display","flexDirection","p","width","height","gap","boxShadow","flex","borderRight","borderColor","m","dataLength","length","next","style","hasMore","loader","isIndeterminate","map","item","justifyContent","padding","color","backgroundColor","borderRadius","content","component","textAlign","onSubmit","e","preventDefault","current","value","trim","message","room","send","stringify","ref","type","colorScheme","icon","event","variant","onClick","name"],"sourceRoot":""}