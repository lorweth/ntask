{"version":3,"file":"static/js/103.bf0cdc09.chunk.js","mappings":"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","sources":["auth/UserProfile.jsx","components/ValidatedInput.jsx","../node_modules/@fortawesome/free-regular-svg-icons/faUser.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n} from '@chakra-ui/react';\nimport { regular } from '@fortawesome/fontawesome-svg-core/import.macro';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ValidatedInput from 'components/ValidatedInput';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { updateProfile } from './authSlice';\n\nexport default function EditProfile() {\n  const dispatch = useDispatch();\n  const navigator = useNavigate();\n  const location = useLocation();\n  const { userData } = useSelector((state) => state.auth);\n  const { control, handleSubmit, setValue } = useForm({\n    defaultValues: {\n      login: '',\n      name: '',\n      avatarUrl: '',\n      bio: '',\n      email: '',\n    },\n  });\n\n  useEffect(() => {\n    setValue('login', userData.login);\n    setValue('name', userData.name);\n    setValue('avatarUrl', userData.avatarUrl);\n    setValue('bio', userData.bio);\n    setValue('email', userData.email);\n  }, [userData]);\n\n  const onClose = () => navigator(location.state?.backgroundLocation?.pathname || '/');\n\n  const onSubmit = (values) => {\n    dispatch(updateProfile({ ...userData, ...values, roles: userData.authorities }));\n  };\n\n  const formRules = {\n    login: {\n      required: 'Login is required',\n    },\n    name: {\n      required: 'Name is required',\n    },\n    avatarUrl: {\n      required: 'Avatar is required',\n    },\n    bio: {\n      required: 'Bio is required',\n    },\n    email: {\n      required: 'Email is required',\n      pattern: {\n        value:\n          /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n        message: 'Please enter a valid email',\n      },\n    },\n  };\n\n  return (\n    <Modal isOpen onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalCloseButton onClick={onClose} />\n        <ModalHeader>\n          <Text fontSize=\"2xl\" fontWeight=\"bold\">\n            <Avatar\n              bg=\"teal.500\"\n              color=\"whiteAlpha.900\"\n              icon={<FontAwesomeIcon icon={regular('user')} />}\n            />\n            &nbsp;Your profile\n          </Text>\n        </ModalHeader>\n        <ModalBody>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              gap: '0.5rem',\n              width: '700',\n              p: 2,\n            }}\n            as=\"form\"\n            onSubmit={handleSubmit(onSubmit)}\n          >\n            <ValidatedInput\n              control={control}\n              name=\"name\"\n              type=\"text\"\n              label=\"Fullname\"\n              rules={formRules.name}\n            />\n\n            <ValidatedInput\n              control={control}\n              name=\"avatarUrl\"\n              type=\"text\"\n              label=\"Avatar URL\"\n              rules={formRules.avatarUrl}\n            />\n\n            <ValidatedInput\n              control={control}\n              name=\"bio\"\n              type=\"text\"\n              label=\"Bio\"\n              rules={formRules.bio}\n            />\n\n            <ValidatedInput\n              control={control}\n              name=\"login\"\n              type=\"text\"\n              label=\"Username\"\n              rules={formRules.login}\n            />\n\n            <ValidatedInput\n              control={control}\n              name=\"email\"\n              type=\"email\"\n              label=\"Email\"\n              rules={formRules.email}\n            />\n\n            <Button type=\"submit\" width=\"100%\" mt={2}>\n              Submit\n            </Button>\n          </Box>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import React from 'react';\nimport { FormControl, FormErrorMessage, FormLabel, Input, Textarea } from '@chakra-ui/react';\nimport { Controller } from 'react-hook-form';\n\nfunction InputComponent({ type, onChange, onBlur, value, innerRef }) {\n  switch (type) {\n    case 'textarea':\n      return <Textarea onChange={onChange} onBlur={onBlur} value={value} ref={innerRef} />;\n    default:\n      return <Input type={type} onChange={onChange} onBlur={onBlur} value={value} ref={innerRef} />;\n  }\n}\n\n/**\n * ValidatedInput is a wrapper around Input that adds validation\n *\n * @param {Object} props with the following properties:\n * - control: the control object from react-hook-form\n * - name: the name of the input\n * - type: the type of the input\n * - label: the label of the input\n * - rules: the rules for the input\n * @see https://react-hook-form.com/api/useform/register\n * @returns the Input with validation\n */\nexport default function ValidatedInput({ control, name, type, label, rules, sx }) {\n  return (\n    <Controller\n      name={name}\n      rules={rules}\n      control={control}\n      render={({ field: { onChange, onBlur, value, ref }, fieldState: { error } }) => (\n        <FormControl sx={sx} isInvalid={!!error}>\n          <FormLabel>{label}</FormLabel>\n          <InputComponent\n            type={type}\n            onChange={onChange}\n            onBlur={onBlur}\n            value={value}\n            innerRef={ref}\n          />\n          {error && <FormErrorMessage>{error?.message}</FormErrorMessage>}\n        </FormControl>\n      )}\n    />\n  );\n}\n","'use strict';\nObject.defineProperty(exports, '__esModule', { value: true });\nvar prefix = 'far';\nvar iconName = 'user';\nvar width = 448;\nvar height = 512;\nvar aliases = [128100,62144];\nvar unicode = 'f007';\nvar svgPathData = 'M272 304h-96C78.8 304 0 382.8 0 480c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32C448 382.8 369.2 304 272 304zM48.99 464C56.89 400.9 110.8 352 176 352h96c65.16 0 119.1 48.95 127 112H48.99zM224 256c70.69 0 128-57.31 128-128c0-70.69-57.31-128-128-128S96 57.31 96 128C96 198.7 153.3 256 224 256zM224 48c44.11 0 80 35.89 80 80c0 44.11-35.89 80-80 80S144 172.1 144 128C144 83.89 179.9 48 224 48z';\n\nexports.definition = {\n  prefix: prefix,\n  iconName: iconName,\n  icon: [\n    width,\n    height,\n    aliases,\n    unicode,\n    svgPathData\n  ]};\n\nexports.faUser = exports.definition;\nexports.prefix = prefix;\nexports.iconName = iconName;\nexports.width = width;\nexports.height = height;\nexports.ligatures = aliases;\nexports.unicode = unicode;\nexports.svgPathData = svgPathData;\nexports.aliases = aliases;"],"names":["EditProfile","dispatch","useDispatch","navigator","useNavigate","location","useLocation","userData","useSelector","state","auth","useForm","defaultValues","login","name","avatarUrl","bio","email","control","handleSubmit","setValue","useEffect","onClose","backgroundLocation","pathname","formRules","required","pattern","value","message","isOpen","onClick","fontSize","fontWeight","bg","color","icon","sx","display","flexDirection","alignItems","gap","width","p","as","onSubmit","values","updateProfile","roles","authorities","type","label","rules","mt","InputComponent","onChange","onBlur","innerRef","ref","ValidatedInput","render","field","error","fieldState","isInvalid","iconName","aliases","unicode","svgPathData","exports","prefix"],"sourceRoot":""}